{"version":3,"file":"chunk-6f4cf830.js","sources":["../src/wallet/proxy/hardware/LedgerProxy.js"],"sourcesContent":["import Tx from 'ethereumjs-tx';\nimport HDKey from 'ethereumjs-wallet/hdkey';\nimport LedgerTransport from '@ledgerhq/hw-transport-u2f'; // for browser\nimport Eth from '@ledgerhq/hw-app-eth';\nimport { sha3, toHex } from 'web3-utils';\nimport { NotificationError } from '@/error';\nimport { HARDWARE_DERIVIATION_PATH } from '@/constants';\nimport getChildrenAddress from '../utils/getChildrenAddress';\n\nexport default class LedgerProxy {\n  static async getNextWallets({ offset = 0, limit = 10, xpub: savedXpub }) {\n    try {\n      const xpub = savedXpub || (await LedgerProxy.getPublicExtendedKey());\n      const hdWallet = HDKey.fromExtendedKey(xpub);\n\n      const addresses = getChildrenAddress(hdWallet, offset, limit);\n\n      return { addresses, xpub };\n    } catch (error) {\n      if (error instanceof NotificationError) {\n        throw error;\n      }\n\n      throw new NotificationError({\n        title: 'Access error',\n        text: `An error occurred while getting access to hardware device. Please, try again.`,\n        type: 'is-danger',\n      });\n    }\n  }\n\n  static async getPublicExtendedKey() {\n    let transport;\n\n    try {\n      transport = await LedgerTransport.create();\n      const eth = new Eth(transport);\n      const { publicKey } = await eth.getAddress(ENV.hdKeyMnemonic.path);\n\n      return publicKey;\n    } catch (error) {\n      console.log(error);\n      let text =\n        'An error occurred while getting access to hardware device. Please, try again.';\n\n      if (error.message.includes('U2F')) {\n        text = error.message;\n      }\n\n      throw new NotificationError({\n        title: 'Access error',\n        text,\n        type: 'is-danger',\n      });\n    } finally {\n      if (transport && transport.close) {\n        await transport.close().catch(console.log);\n      }\n    }\n  }\n\n  static async sign(message, index) {\n    let transport;\n\n    try {\n      transport = await LedgerTransport.create();\n      const eth = new Eth(transport);\n\n      const prefixedMessage = `\\x19Ethereum Signed Message:\\n${\n        message.length\n      }${message}`;\n      const messageHash = sha3(prefixedMessage);\n\n      const { r, s, v: vInt } = await eth.signPersonalMessage(\n        `${HARDWARE_DERIVIATION_PATH}${index}`,\n        Buffer.from(message).toString('hex'),\n      );\n\n      let vRaw = (vInt - 27).toString(16);\n\n      if (vRaw.length < 2) {\n        vRaw = `0${vRaw}`;\n      }\n\n      const v = vRaw === 27 || vRaw === 28 ? toHex(vInt) : toHex(vInt + 27);\n\n      const signature = `0x${r}${s}${vRaw}`;\n\n      return {\n        message,\n        messageHash,\n        signature,\n        r: `0x${r}`,\n        s: `0x${s}`,\n        v: `0x${v}`,\n      };\n    } catch (error) {\n      console.log(error);\n      throw new NotificationError({\n        title: 'Access error',\n        text: `An error occurred while getting access to hardware device. Please, try again.`,\n        type: 'is-danger',\n      });\n    } finally {\n      if (transport && transport.close) {\n        await transport.close().catch(console.log);\n      }\n    }\n  }\n\n  static async signTransaction(transaction, index) {\n    let transport;\n\n    try {\n      transport = await LedgerTransport.create();\n      const eth = new Eth(transport);\n      const tempTx = new Tx(transaction);\n\n      const payload = await eth.signTransaction(\n        `${HARDWARE_DERIVIATION_PATH}${index}`,\n        `${tempTx.serialize().toString('hex')}`,\n      );\n\n      if (!payload) {\n        throw new Error('Bad Trezor response');\n      }\n\n      const sign = {\n        r: payload.r,\n        s: payload.s,\n        v: payload.v,\n      };\n      const tx = new Tx({ ...transaction, ...sign });\n\n      return `0x${tx.serialize().toString('hex')}`;\n    } catch (error) {\n      console.log(error);\n      throw new NotificationError({\n        title: 'Access error',\n        text: `An error occurred while getting access to hardware device. Please, try again.`,\n        type: 'is-danger',\n      });\n    } finally {\n      if (transport && transport.close) {\n        await transport.close().catch(console.log);\n      }\n    }\n  }\n}\n"],"names":["LedgerProxy","offset","limit","savedXpub","xpub","getPublicExtendedKey","hdWallet","HDKey","fromExtendedKey","addresses","getChildrenAddress","NotificationError","title","text","type","LedgerTransport","create","transport","eth","Eth","getAddress","ENV","hdKeyMnemonic","path","publicKey","console","log","message","includes","close","catch","index","prefixedMessage","length","messageHash","sha3","signPersonalMessage","HARDWARE_DERIVIATION_PATH","Buffer","from","toString","r","s","vInt","v","vRaw","toHex","signature","transaction","tempTx","Tx","signTransaction","serialize","payload","Error","sign","tx"],"mappings":";;;;;;;;;;;IASqBA;;;;;;;;;;;;;;;;;;;mCACWC,QAAAA,kCAAS,mCAAGC,OAAAA,gCAAQ,iBAAUC,iBAANC;;8BAErCD;;;;;;;;uBAAoBH,WAAW,CAACK,oBAAZ;;;;;;gBAA3BD;gBACAE,WAAWC,KAAK,CAACC,eAAN,CAAsBJ,IAAtB;gBAEXK,YAAYC,kBAAkB,CAACJ,QAAD,EAAWL,MAAX,EAAmBC,KAAnB;iDAE7B;kBAAEO,SAAS,EAATA,SAAF;kBAAaL,IAAI,EAAJA;;;;;;;sBAEhB,uBAAiBO;;;;;;;;sBAIf,IAAIA,iBAAJ,CAAsB;kBAC1BC,KAAK,EAAE,cADmB;kBAE1BC,IAAI,iFAFsB;kBAG1BC,IAAI,EAAE;iBAHF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAYYC,eAAe,CAACC,MAAhB;;;gBAAlBC;gBACMC,MAAM,IAAIC,GAAJ,CAAQF,SAAR;;uBACgBC,GAAG,CAACE,UAAJ,CAAeC,GAAG,CAACC,aAAJ,CAAkBC,IAAjC;;;;gBAApBC,kBAAAA;kDAEDA;;;;;gBAEPC,OAAO,CAACC,GAAR;gBACIb,OACF;;oBAEE,aAAMc,OAAN,CAAcC,QAAd,CAAuB,KAAvB,CAAJ,EAAmC;kBACjCf,IAAI,GAAG,aAAMc,OAAb;;;sBAGI,IAAIhB,iBAAJ,CAAsB;kBAC1BC,KAAK,EAAE,cADmB;kBAE1BC,IAAI,EAAJA,IAF0B;kBAG1BC,IAAI,EAAE;iBAHF;;;;;sBAMFG,SAAS,IAAIA,SAAS,CAACY;;;;;;uBACnBZ,SAAS,CAACY,KAAV,GAAkBC,KAAlB,CAAwBL,OAAO,CAACC,GAAhC;;;;;;;;;;;;;;;;;;;;;;;;iDAKMC,SAASI;;;;;;;;;uBAILhB,eAAe,CAACC,MAAhB;;;gBAAlBC;gBACMC,MAAM,IAAIC,GAAJ,CAAQF,SAAR;gBAENe,0DACJL,OAAO,CAACM,eACPN;gBACGO,cAAcC,IAAI,CAACH,eAAD;;uBAEQd,GAAG,CAACkB,mBAAJ,WAC3BC,yBAD2B,SACCN,KADD,GAE9BO,MAAM,CAACC,IAAP,CAAYZ,OAAZ,EAAqBa,QAArB,CAA8B,KAA9B,CAF8B;;;;gBAAxBC,UAAAA;gBAAGC,UAAAA;gBAAMC,aAAHC;gBAKVC,OAAO,CAACF,IAAI,GAAG,EAAR,EAAYH,QAAZ,CAAqB,EAArB;;oBAEPK,IAAI,CAACZ,MAAL,GAAc,CAAlB,EAAqB;kBACnBY,IAAI,cAAOA,IAAP,CAAJ;;;gBAGID,IAAIC,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,EAAxB,GAA6BC,KAAK,CAACH,IAAD,CAAlC,GAA2CG,KAAK,CAACH,IAAI,GAAG,EAAR;gBAEpDI,wBAAiBN,UAAIC,UAAIG;kDAExB;kBACLlB,OAAO,EAAPA,OADK;kBAELO,WAAW,EAAXA,WAFK;kBAGLa,SAAS,EAATA,SAHK;kBAILN,CAAC,cAAOA,CAAP,CAJI;kBAKLC,CAAC,cAAOA,CAAP,CALI;kBAMLE,CAAC,cAAOA,CAAP;;;;;;gBAGHnB,OAAO,CAACC,GAAR;sBACM,IAAIf,iBAAJ,CAAsB;kBAC1BC,KAAK,EAAE,cADmB;kBAE1BC,IAAI,iFAFsB;kBAG1BC,IAAI,EAAE;iBAHF;;;;;sBAMFG,SAAS,IAAIA,SAAS,CAACY;;;;;;uBACnBZ,SAAS,CAACY,KAAV,GAAkBC,KAAlB,CAAwBL,OAAO,CAACC,GAAhC;;;;;;;;;;;;;;;;;;;;;;;;iDAKiBsB,aAAajB;;;;;;;;uBAIpBhB,eAAe,CAACC,MAAhB;;;gBAAlBC;gBACMC,MAAM,IAAIC,GAAJ,CAAQF,SAAR;gBACNgC,SAAS,IAAIC,EAAJ,CAAOF,WAAP;;uBAEO9B,GAAG,CAACiC,eAAJ,WACjBd,yBADiB,SACWN,KADX,aAEjBkB,MAAM,CAACG,SAAP,GAAmBZ,QAAnB,CAA4B,KAA5B,CAFiB;;;gBAAhBa;;oBAKDA;;;;;sBACG,IAAIC,KAAJ,CAAU,qBAAV;;;gBAGFC,OAAO;kBACXd,CAAC,EAAEY,OAAO,CAACZ,CADA;kBAEXC,CAAC,EAAEW,OAAO,CAACX,CAFA;kBAGXE,CAAC,EAAES,OAAO,CAACT;;gBAEPY,KAAK,IAAIN,EAAJ,mBAAYF,WAAZ,EAA4BO,IAA5B;8DAECC,EAAE,CAACJ,SAAH,GAAeZ,QAAf,CAAwB,KAAxB;;;;;gBAEZf,OAAO,CAACC,GAAR;sBACM,IAAIf,iBAAJ,CAAsB;kBAC1BC,KAAK,EAAE,cADmB;kBAE1BC,IAAI,iFAFsB;kBAG1BC,IAAI,EAAE;iBAHF;;;;;sBAMFG,SAAS,IAAIA,SAAS,CAACY;;;;;;uBACnBZ,SAAS,CAACY,KAAV,GAAkBC,KAAlB,CAAwBL,OAAO,CAACC,GAAhC;;;;;;;;;;;;;;;;;;;;;;;;;;"}