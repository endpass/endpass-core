{"version":3,"file":"chunk-f6e67ce9.js","sources":["../src/wallet/proxy/hardware/TrezorProxy.js"],"sourcesContent":["import TrezorConnect from 'trezor-connect';\nimport Tx from 'ethereumjs-tx';\nimport HDKey from 'ethereumjs-wallet/hdkey';\nimport { sha3, toHex, toDecimal } from 'web3-utils';\nimport { NotificationError } from '@/error';\nimport { HARDWARE_DERIVIATION_PATH } from '@/constants';\nimport getChildrenAddress from '../utils/getChildrenAddress';\n\nexport default class TrezorProxy {\n  static async getNextWallets({ offset = 0, limit = 10, xpub: savedXpub }) {\n    try {\n      const xpub = savedXpub || (await TrezorProxy.getPublicExtendedKey());\n      const hdWallet = HDKey.fromExtendedKey(xpub);\n\n      const addresses = getChildrenAddress(hdWallet, offset, limit);\n\n      return { addresses, xpub };\n    } catch (error) {\n      throw new NotificationError({\n        title: 'Access error',\n        text: `An error occurred while getting access to hardware device. Please, try again.`,\n        type: 'is-danger',\n      });\n    }\n  }\n\n  static async getPublicExtendedKey() {\n    try {\n      const { path } = ENV.hdKeyMnemonic;\n      const {\n        payload: { xpub },\n      } = await TrezorConnect.getPublicKey({ path });\n\n      return xpub;\n    } catch (error) {\n      throw new NotificationError({\n        title: 'Access error',\n        text: `An error occurred while getting access to hardware device. Please, try again.`,\n        type: 'is-danger',\n      });\n    }\n  }\n\n  static async sign(message, index) {\n    // \\u0019 \\x19\n    const prefixedMessage = `\\x19Ethereum Signed Message:\\n${\n      message.length\n    }${message}`;\n    const messageHash = sha3(prefixedMessage);\n    const { success, payload } = await TrezorConnect.ethereumSignMessage({\n      path: `${HARDWARE_DERIVIATION_PATH}${index}`,\n      message,\n    });\n\n    if (!success) {\n      throw new Error(payload.error || 'Bad Trezor response');\n    }\n\n    const { signature } = payload;\n    const r = `0x${signature.slice(0, 64)}`;\n    const s = `0x${signature.slice(64, 128)}`;\n    const vInt = toDecimal(signature.slice(128, 130));\n    const v = vInt === 27 || vInt === 28 ? toHex(vInt) : toHex(vInt + 27);\n\n    return {\n      message,\n      messageHash,\n      signature: `0x${signature}`,\n      r,\n      s,\n      v,\n    };\n  }\n\n  static async signTransaction(transaction, index) {\n    const { payload } = await TrezorConnect.ethereumSignTransaction({\n      path: `${HARDWARE_DERIVIATION_PATH}${index}`,\n      transaction,\n    });\n\n    if (payload.error) {\n      throw new Error(payload.error || 'Bad Trezor response');\n    }\n\n    const sign = {\n      r: payload.r,\n      s: payload.s,\n      v: payload.v,\n    };\n    const tx = new Tx({ ...transaction, ...sign });\n\n    return `0x${tx.serialize().toString('hex')}`;\n  }\n}\n"],"names":["TrezorProxy","offset","limit","savedXpub","xpub","getPublicExtendedKey","hdWallet","HDKey","fromExtendedKey","addresses","getChildrenAddress","NotificationError","title","text","type","path","ENV","hdKeyMnemonic","TrezorConnect","getPublicKey","payload","message","index","prefixedMessage","length","messageHash","sha3","ethereumSignMessage","HARDWARE_DERIVIATION_PATH","success","Error","error","signature","r","slice","s","vInt","toDecimal","v","toHex","transaction","ethereumSignTransaction","sign","tx","Tx","serialize","toString"],"mappings":";;;;;;;;;;IAQqBA;;;;;;;;;;;;;;;;;;;mCACWC,QAAAA,kCAAS,mCAAGC,OAAAA,gCAAQ,iBAAUC,iBAANC;;8BAErCD;;;;;;;;uBAAoBH,WAAW,CAACK,oBAAZ;;;;;;gBAA3BD;gBACAE,WAAWC,KAAK,CAACC,eAAN,CAAsBJ,IAAtB;gBAEXK,YAAYC,kBAAkB,CAACJ,QAAD,EAAWL,MAAX,EAAmBC,KAAnB;iDAE7B;kBAAEO,SAAS,EAATA,SAAF;kBAAaL,IAAI,EAAJA;;;;;;sBAEd,IAAIO,iBAAJ,CAAsB;kBAC1BC,KAAK,EAAE,cADmB;kBAE1BC,IAAI,iFAFsB;kBAG1BC,IAAI,EAAE;iBAHF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gBAUEC,OAASC,GAAG,CAACC,cAAbF;;uBAGEG,aAAa,CAACC,YAAd,CAA2B;kBAAEJ,IAAI,EAAJA;iBAA7B;;;;gBADGX,aAAXgB,QAAWhB;kDAGNA;;;;;sBAED,IAAIO,iBAAJ,CAAsB;kBAC1BC,KAAK,EAAE,cADmB;kBAE1BC,IAAI,iFAFsB;kBAG1BC,IAAI,EAAE;iBAHF;;;;;;;;;;;;;;;;;;;;;iDAQQO,SAASC;;;;;;;;gBAEnBC,0DACJF,OAAO,CAACG,eACPH;gBACGI,cAAcC,IAAI,CAACH,eAAD;;uBACWL,aAAa,CAACS,mBAAd,CAAkC;kBACnEZ,IAAI,YAAKa,yBAAL,SAAiCN,KAAjC,CAD+D;kBAEnED,OAAO,EAAPA;iBAFiC;;;;gBAA3BQ,gBAAAA;gBAAST,gBAAAA;;oBAKZS;;;;;sBACG,IAAIC,KAAJ,CAAUV,OAAO,CAACW,KAAR,IAAiB,qBAA3B;;;gBAGAC,YAAcZ,QAAdY;gBACFC,gBAASD,SAAS,CAACE,KAAV,CAAgB,CAAhB,EAAmB,EAAnB;gBACTC,gBAASH,SAAS,CAACE,KAAV,CAAgB,EAAhB,EAAoB,GAApB;gBACTE,OAAOC,SAAS,CAACL,SAAS,CAACE,KAAV,CAAgB,GAAhB,EAAqB,GAArB,CAAD;gBAChBI,IAAIF,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,EAAxB,GAA6BG,KAAK,CAACH,IAAD,CAAlC,GAA2CG,KAAK,CAACH,IAAI,GAAG,EAAR;kDAEnD;kBACLf,OAAO,EAAPA,OADK;kBAELI,WAAW,EAAXA,WAFK;kBAGLO,SAAS,cAAOA,SAAP,CAHJ;kBAILC,CAAC,EAADA,CAJK;kBAKLE,CAAC,EAADA,CALK;kBAMLG,CAAC,EAADA;;;;;;;;;;;;;;;;;;;;;;iDAIyBE,aAAalB;;;;;;;;uBACdJ,aAAa,CAACuB,uBAAd,CAAsC;kBAC9D1B,IAAI,YAAKa,yBAAL,SAAiCN,KAAjC,CAD0D;kBAE9DkB,WAAW,EAAXA;iBAFwB;;;;gBAAlBpB,gBAAAA;;qBAKJA,OAAO,CAACW;;;;;sBACJ,IAAID,KAAJ,CAAUV,OAAO,CAACW,KAAR,IAAiB,qBAA3B;;;gBAGFW,OAAO;kBACXT,CAAC,EAAEb,OAAO,CAACa,CADA;kBAEXE,CAAC,EAAEf,OAAO,CAACe,CAFA;kBAGXG,CAAC,EAAElB,OAAO,CAACkB;;gBAEPK,KAAK,IAAIC,EAAJ,mBAAYJ,WAAZ,EAA4BE,IAA5B;8DAECC,EAAE,CAACE,SAAH,GAAeC,QAAf,CAAwB,KAAxB;;;;;;;;;;;;;;;;;;;;;;;"}