declare enum ERROR_KEYS {
  AUTH_CANCELED_BY_USER = 'AUTH_CANCELED_BY_USER',
  AUTH = 'AUTH',
  AUTH_LOGOUT = 'AUTH_LOGOUT',
  USER_NOT_AUTHORIZED = 'USER_NOT_AUTHORIZED',
  ACCOUNT_UPDATE = 'ACCOUNT_UPDATE',
  INITIALIZE = 'INITIALIZE',
  SIGN = 'SIGN',
  RECOVERY = 'RECOVERY',
  REQUEST_DATA = 'REQUEST_DATA',
  BRIDGE_PROVIDE_METHOD = 'BRIDGE_PROVIDE_METHOD',
  OAUTH_REQUIRE_ID = 'OAUTH_REQUIRE_ID',
  OAUTH_REQUIRE_AUTHORIZE = 'OAUTH_REQUIRE_AUTHORIZE',
  OAUTH_NOT_LOGGED_IN = 'OAUTH_NOT_LOGGED_IN',
  OAUTH_INITIALIZE_INSTANCE = 'OAUTH_INITIALIZE_INSTANCE',
  OAUTH_AUTHORIZE = 'OAUTH_AUTHORIZE',
  OAUTH_AUTHORIZE_STATE = 'OAUTH_AUTHORIZE_STATE',
  OAUTH_AUTHORIZE_EXCHANGE_TOKEN = 'OAUTH_AUTHORIZE_EXCHANGE_TOKEN',
  EVENT_EMITTER_NOT_PROVIDED = 'EVENT_EMITTER_NOT_PROVIDED',
  CREATE_DOCUMENT = 'CREATE_DOCUMENT',
  CREATE_WALLET = 'CREATE_WALLET',
  POPUP_CLOSED = 'POPUP_CLOSED',
  NOT_DEFINED = 'NOT_DEFINED',
}

type ERRORS = {
  [index in keyof typeof ERROR_KEYS]: string;
}


type ErrorCode = Error & {
  code: number,
}

declare class ConnectError {
  static create(code: number | string, message?: string): ErrorCode;

  static createFromError(error: Error, defaultCode: number | string): ErrorCode;

  static get ERRORS(): ERRORS;
}

export default ConnectError;
